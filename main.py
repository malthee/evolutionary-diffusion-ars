import os
import random
import sys

from PyQt6.QtCore import Qt, QRect, pyqtSlot, QTimer
from PyQt6.QtGui import QIcon
from PyQt6.QtWidgets import QApplication, QMainWindow, QLabel, QWidget, QHBoxLayout, QFrame, QVBoxLayout, QPushButton, \
    QSlider

from image_manager import ImageInfo, ImageManager
from image_window import DRAGGABLE_WINDOW_WIDTH, DRAGGABLE_WINDOW_HEIGHT, DraggableImageWindow
from info_window import InfoWindow
from qr_blob_manager import QRBlobManager

APP_NAME = "evolutionary-diffusion Interactive Ars Demo"
APP_ICON = "./assets/icon.png"
APP_VERSION = "0.1.0"
START_IMAGES = 3
MAX_FIND_POSITION_TRIES = 10


class ImageMenu(QFrame):
    def __init__(self, image_manager: ImageManager, qr_blob_manager: QRBlobManager, parent=None):
        super().__init__(parent)
        self._image_manager = image_manager
        self._qr_blob_manager = qr_blob_manager
        self._image_manager.selectionCountChanged.connect(self.update_visibility)
        self._image_manager.isLoadingChanged.connect(self.update_loading)
        self.setFixedSize(310, 200)
        self.setStyleSheet("""
            QPushButton {
                background-color: #777;
                color: white;
                border: none;
                border-radius: 25px;
                font-size: 24px;
                padding: 14px;
                min-width: 150px;
                min-height: 30px;
            }
            QPushButton:hover {
                background-color: #666;
            }
            QSlider::groove:horizontal {
                height: 14px;
                background: #DDD;
                border: 1px solid #999;
                border-radius: 8px;
            }
            QSlider::handle:horizontal {
                background: #888;
                border: 2px solid #666;
                width: 24px;
                height: 24px;
                margin: -5px 0;
                border-radius: 12px;
            }
            QLabel {
                color: #333;
                font-size: 24px;
                padding: 5px;
            }
        """)

        self.layout = QVBoxLayout(self)
        self.layout.setAlignment(Qt.AlignmentFlag.AlignBottom)
        self.layout.setContentsMargins(20, 20, 20, 20)
        self.layout.setSpacing(10)

        self.new_image_button = QPushButton("+ New Image")
        self.new_image_button.clicked.connect(self.new_image)
        self.layout.addWidget(self.new_image_button)

        self.mutate_button = QPushButton("üß¨ Mutate this Image")
        self.mutate_button.clicked.connect(self.mutate_image)
        self.layout.addWidget(self.mutate_button)

        self.qr_code_button = QPushButton("üì∑ Download QR Code")
        self.qr_code_button.clicked.connect(self.upload_and_get_qr_code)
        self.layout.addWidget(self.qr_code_button)

        self.slider_label = QLabel("üßë‚Äçüßë‚ÄçüßíParent Contribution")
        self.slider_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.slider = QSlider(Qt.Orientation.Horizontal)
        self.slider.setMinimum(0)
        self.slider.setMaximum(100)
        self.slider.setValue(50)

        self.split_button = QPushButton("üë∂ Create Child")
        self.split_button.clicked.connect(self.create_child)

        self.slider_layout = QVBoxLayout()
        self.slider_layout.addWidget(self.slider_label)
        self.slider_layout.addWidget(self.slider)
        self.slider_layout.addWidget(self.split_button)
        self.layout.addLayout(self.slider_layout)

        self.loading_label = QLabel("Being generated by AI", self)
        self.loading_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.loading_label.setStyleSheet("font-size: 24px; color: gray; padding-bottom:20px;")
        self.layout.addWidget(self.loading_label)
        self.loading_label.hide()  # Hide loading label initially

        self.timer = QTimer(self)
        self.timer.timeout.connect(self.animate_loading)
        self.loading_dots = 0

        self.interactive_widgets = [
            self.new_image_button,
            self.mutate_button,
            self.qr_code_button,
            self.slider_label,
            self.slider,
            self.split_button
        ]

        self.update_visibility(len(self._image_manager.selected_images))

    def closeEvent(self, event):
        self._qr_blob_manager.qr_image_finished.disconnect(self._image_manager.manual_add_image)
        self._image_manager.selectionChanged.disconnect(self.update_visibility)
        self._image_manager.isLoadingChanged.disconnect(self.update_loading)
        self.timer.stop()
        event.accept()

    @pyqtSlot()
    def new_image(self):
        self._image_manager.generate_image()

    @pyqtSlot()
    def mutate_image(self):
        self._image_manager.mutate_image(self._image_manager.selected_images[0])

    @pyqtSlot()
    def create_child(self):
        parent1, parent2 = self._image_manager.selected_images
        parent_contribution = self.slider.value()
        self._image_manager.create_child(parent1, parent2, parent_contribution)
        # Reset slider
        self.slider.setValue(50)

    @pyqtSlot(int)
    def update_visibility(self, selected_count):
        """
        When none selected, allow new child creation. Otherwise, either mutate an image or create a child
        from two images.
        Do not show when loading.
        """
        is_loading = self.loading_label.isVisible()
        for widget in self.interactive_widgets:
            widget.setVisible(not is_loading)

        if not is_loading:
            self.new_image_button.setVisible(selected_count == 0)
            self.mutate_button.setVisible(selected_count == 1)
            self.qr_code_button.setVisible(selected_count == 1)
            self.slider_label.setVisible(selected_count == 2)
            self.slider.setVisible(selected_count == 2)
            self.split_button.setVisible(selected_count == 2)

    @pyqtSlot()
    def upload_and_get_qr_code(self):
        image_info = self._image_manager.selected_images[0]
        self._qr_blob_manager.start_upload(image_info)

    @pyqtSlot(bool)
    def update_loading(self, loading):
        self.loading_label.setVisible(loading)
        if loading:
            self.timer.start(300)
        else:
            self.timer.stop()
            self.loading_dots = 0
            self.loading_label.setText("Being generated by AI")
        self.update_visibility(len(self._image_manager.selected_images))

    @pyqtSlot()
    def animate_loading(self):
        dots = '.' * (self.loading_dots % 4)
        self.loading_label.setText(f"Being generated by AI{dots}")
        self.loading_dots += 1


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self._image_manager = ImageManager()
        self._qr_blob_manager = QRBlobManager()
        self._image_manager.imageAdded.connect(self.on_image_added)
        self._image_manager.imageRemoved.connect(self.on_image_removed)
        # Finished qr codes are added to the image manager
        self._qr_blob_manager.qr_image_finished.connect(self._image_manager.manual_add_image)

        self.setWindowTitle(APP_NAME)
        self.setWindowFlags(Qt.WindowType.FramelessWindowHint | Qt.WindowType.WindowStaysOnTopHint |
                            Qt.WindowType.CustomizeWindowHint)
        self.showFullScreen()

        button_style = """
                    QPushButton {
                        background-color: transparent;
                        font-size: 48px;
                        border: none;
                        border-radius: 12px;
                        margin: 10px;
                    }
                    QPushButton:hover {
                        background-color: lightgray;
                    }
                """

        # Create a helper method to create buttons with consistent styling and properties
        def create_button(parent, text, tooltip, slot):
            button = QPushButton(parent=parent, text=text)
            button.setToolTip(tooltip)
            button.setStyleSheet(button_style)
            button.clicked.connect(slot)
            return button

        corner_layout = QHBoxLayout()
        corner_layout.setSpacing(0)
        corner_layout.addStretch()
        # self.uk_button = create_button(self, "üá¨üáß", "English (UK)", lambda: self.change_language("en"))
        # corner_layout.addWidget(self.uk_button)
        # self.austria_button = create_button(self, "üá¶üáπ", "German (Austria)", lambda: self.change_language("de"))
        # corner_layout.addWidget(self.austria_button)
        self.info_button = create_button(self, "‚ÑπÔ∏è", "Information", self.show_info)
        corner_layout.addWidget(self.info_button)
        self.trash_button = create_button(self, "üóëÔ∏è", "Clear all Images", self.clear_all_images)
        corner_layout.addWidget(self.trash_button)

        self.image_menu = ImageMenu(self._image_manager, self._qr_blob_manager, self)
        main_layout = QVBoxLayout()
        main_layout.addLayout(corner_layout)
        central_widget = QWidget()
        central_widget.setLayout(main_layout)
        main_layout.addStretch()
        main_layout.addWidget(self.image_menu, alignment=Qt.AlignmentFlag.AlignHCenter | Qt.AlignmentFlag.AlignBottom)
        self.setCentralWidget(central_widget)

        self.frames = []
        self.info_window = None
        self._initImages()

    # If needed to prevent closing
    # def closeEvent(self, event):
    #   event.ignore()

    def _initImages(self):
        for _ in range(START_IMAGES):
            self._image_manager.generate_image()

    def _getRandomRect(self):
        """Tries to find a random rectangle that does not intersect with any of the existing frames in MAX_FIND_POSITION_TRIES
        attempts. Otherwise, just uses the random position."""
        for _ in range(MAX_FIND_POSITION_TRIES):
            x = random.randint(0, self.width() - DRAGGABLE_WINDOW_WIDTH)
            y = random.randint(0, self.height() - DRAGGABLE_WINDOW_HEIGHT)
            rect = QRect(x, y, DRAGGABLE_WINDOW_WIDTH, DRAGGABLE_WINDOW_HEIGHT)

            if not any(frame.geometry().intersects(rect) for frame in self.frames):
                return rect
        return QRect(random.randint(0, self.width() - DRAGGABLE_WINDOW_WIDTH), random.randint(0, self.height() - DRAGGABLE_WINDOW_HEIGHT),
                     DRAGGABLE_WINDOW_WIDTH, DRAGGABLE_WINDOW_HEIGHT)

    def _getCenterFromRects(self, rect1, rect2):
        """Returns a QRect that is centered between two QRects but bounded in the main window."""
        x = int((rect1.x() + rect2.x()) / 2)
        y = int((rect1.y() + rect2.y()) / 2)
        # Check bounds
        if x + DRAGGABLE_WINDOW_WIDTH > self.width():
            x = self.width() - DRAGGABLE_WINDOW_WIDTH
        if y + DRAGGABLE_WINDOW_HEIGHT > self.height():
            y = self.height() - DRAGGABLE_WINDOW_HEIGHT
        return QRect(x, y, DRAGGABLE_WINDOW_WIDTH, DRAGGABLE_WINDOW_HEIGHT)

    def _getCloseRect(self, rect):
        """Returns a QRect that is close to the given QRect."""
        x = rect.x() + DRAGGABLE_WINDOW_WIDTH + 10  # 10 pixels to the right
        y = rect.y()
        if x + DRAGGABLE_WINDOW_WIDTH > self.width():
            x = self.width() - DRAGGABLE_WINDOW_WIDTH
        if y + DRAGGABLE_WINDOW_HEIGHT > self.height():
            y = self.height() - DRAGGABLE_WINDOW_HEIGHT
        return QRect(x, y, DRAGGABLE_WINDOW_HEIGHT, DRAGGABLE_WINDOW_HEIGHT)

    def _frameForImage(self, image_info: ImageInfo) -> DraggableImageWindow:
        return next((f for f in self.frames if f.image_info == image_info), None)

    @pyqtSlot(ImageInfo)
    def on_image_added(self, image_info: ImageInfo):
        print(f"Image added: {image_info.name}")
        frame = DraggableImageWindow(image_info, self._image_manager)
        if image_info.parent1 is not None:
            parent1_frame = self._frameForImage(image_info.parent1)
            if image_info.parent2 is not None:  # Child created
                parent2_frame = self._frameForImage(image_info.parent2)
                if parent1_frame is not None and parent2_frame is not None:
                    frame.setGeometry(self._getCenterFromRects(parent1_frame.geometry(), parent2_frame.geometry()))
            elif parent1_frame is not None:  # Mutated
                frame.setGeometry(self._getCloseRect(parent1_frame.geometry()))
        else:  # New image
            frame.setGeometry(self._getRandomRect())
        frame.show()
        frame.raise_()
        self.frames.append(frame)

    @pyqtSlot(ImageInfo)
    def on_image_removed(self, image_info: ImageInfo):
        frame = self._frameForImage(image_info)
        if frame is not None:
            frame.close()
            self.frames.remove(frame)

    @pyqtSlot()
    def clear_all_images(self):
        self._image_manager.clear_all_images()
        for frame in self.frames:
            frame.close()

    @pyqtSlot()
    def show_info(self):
        if self.info_window is None:
            self.info_window = InfoWindow()
        self.info_window.show()
        self.info_window.raise_()

    @pyqtSlot(str)
    def change_language(self, language):
        print(f"Change language to {language}")  # TODO maybe language selection

    def mousePressEvent(self, event):
        if event.button() == Qt.MouseButton.LeftButton:
            self._image_manager.unselect_all()


if __name__ == '__main__':
    os.environ["QT_QPA_PLATFORMTHEME"] = "light"  # Force light theme
    app = QApplication(sys.argv)
    app.setWindowIcon(QIcon(APP_ICON))
    app.setApplicationName(APP_NAME)
    app.setApplicationDisplayName(APP_NAME)
    app.setApplicationVersion(APP_VERSION)
    mainWindow = MainWindow()
    mainWindow.show()
    sys.exit(app.exec())
